--[[
	CharacterSystem.lua
]]--

return function(InfinityECS)
	-- // Services
	local SettingsService = InfinityECS:GetService("Settings", true)
	local ContextService = InfinityECS:GetService("Context", true)
	local TerrainService = InfinityECS:GetService("Terrain", true)
	local ActionService = InfinityECS:GetService("Action", true)

	local CharacterService = InfinityECS:GetService("Character", true)

	-- // Variables
	local CharacterSystem = InfinityECS.System.new()

	-- local TableFind = table.find	
	-- local StringMatch = string.match

	function CharacterSystem.IsInRigTable(PlayerEntity, Object)
		local Player = PlayerEntity.Player:Get()
		local Humanoid = CharacterService.Humanoid(Player)

		if Humanoid then
			local index = table.find(SettingsService.Exploits.Character.Rig[Humanoid.RigType], Object.Name) ~= nil

			if not index then
				index = table.find(SettingsService.Exploits.Character.Rig[Humanoid.RigType], Object.ClassName) ~= nil
			end

			return index
		end
	end

	function CharacterSystem.OnAccessoryAdded(PlayerEntity, Accessory, Janitor)
		local Player = PlayerEntity.Player:Get()
		local Character = Player.Character
		local Object = Accessory:WaitForChild("Handle")
		local Weld = Object:WaitForChild("AccessoryWeld", 5)

		Janitor:Give(Weld.AncestryChanged:Connect(function()
			if Weld.Parent ~= Object then
				Janitor:Clean()

				if not CharacterService.IsAlive(Player) or not CharacterService.IsInBounds(Player) then
					return
				end

				if not ContextService.ObjectDestroyedByServer(Weld) then
					Character:BreakJoints()

					ActionService.TakeAction(Player, SettingsService.Violations.CharacterModificationViolation)
				end
			end
		end))
	end

	function CharacterSystem.OnCharacterAppearanceLoaded(PlayerEntity)
		local Player = PlayerEntity.Player:Get()
		local Janitors = PlayerEntity.Janitors:Get()

		local Humanoid = CharacterService.Humanoid(Player)
		local HumanoidRootPart = CharacterService.RootPart(Player)
		local Character = Player.Character

		if Humanoid and HumanoidRootPart then
			local Janitor = InfinityECS.Janitor.new()
			table.insert(Janitors.Character, Janitor)

			Janitor:Give(Character.DescendantRemoving:Connect(function(Object)
				if not CharacterService.IsAlive(Player) or not CharacterService.IsInBounds(Player) then
					return
				end

				if CharacterSystem.IsInRigTable(PlayerEntity, Object) and not ContextService.ObjectDestroyedByServer(Object) then
					Janitor:Clean()
					Character:BreakJoints()

					ActionService.TakeAction(Player, SettingsService.Violations.CharacterModificationViolation)
				end
 			end))

			Janitor:Give(Character.ChildAdded:Connect(function(Object)
				if Object:IsA("Accessory") then
					CharacterSystem.OnAccessoryAdded(PlayerEntity, Object, Janitor)
				end

				if CharacterSystem.IsInRigTable(PlayerEntity, Object) then
					Janitor:Give(ContextService.Listen(Object))
				end
			end))

			for _, Object in Character:GetChildren() do
				if Object:IsA("Accessory") then
					CharacterSystem.OnAccessoryAdded(PlayerEntity, Object, Janitor)
				end

				if CharacterSystem.IsInRigTable(PlayerEntity, Object) then
					Janitor:Give(ContextService.Listen(Object))
				end
			end
		end
	end

	function CharacterSystem.OnCharacterAdded(PlayerEntity)
		local Player = PlayerEntity.Player:Get()
		local Janitors = PlayerEntity.Janitors:Get()

		local Humanoid = CharacterService.Humanoid(Player)
		local Character = Player.Character

		if Humanoid then
			local Janitor = InfinityECS.Janitor.new()
			table.insert(Janitors.Character, Janitor)

			Janitor:Give(Humanoid.Died:Connect(function()
				task.wait(SettingsService.Exploits.Character.RespawnTime + 1)

				if Character.Parent then
					ActionService.TakeAction(Player, SettingsService.Violations.CharacterRespawnViolation)
					Character.Parent = nil
					
					return Player:LoadCharacter()
				end
			end))

			if not SettingsService.Exploits.Character.GameHasCustomWater then
				Janitor:Give(Humanoid.StateChanged:Connect(function()
					while task.wait(2.5) and Humanoid:GetState() == Enum.HumanoidStateType.Swimming do
						if not TerrainService.IsMaterialInPlayersHitbox(Player, Enum.Material.Water) then
							ActionService.TakeAction(Player, SettingsService.Violations.AirSwimmingViolation)
					
							return Player:LoadCharacter()
						end
					end
				end))
			end
		end
	end

	function CharacterSystem:OnPlayerLoaded(PlayerEntity)
		local Player = PlayerEntity.Player:Get()
		local Janitors = PlayerEntity.Janitors:Get()

		local Janitor = InfinityECS.Janitor.new()
		table.insert(Janitors.Global, Janitor)

		Janitor:Give(Player.CharacterAppearanceLoaded:Connect(function()
			CharacterSystem.OnCharacterAppearanceLoaded(PlayerEntity)
		end))

		Janitor:Give(Player.CharacterAdded:Connect(function()
			CharacterSystem.OnCharacterAdded(PlayerEntity)
		end))

		Janitor:Give(Player.CharacterRemoving:Connect(function()
			CharacterSystem.OnCharacterAdded(PlayerEntity)
		end))

		if Player.Character then
			CharacterSystem.OnCharacterAdded(PlayerEntity)
			CharacterSystem.OnCharacterAppearanceLoaded(PlayerEntity)
		end
	end

	-- // Binds
	InfinityECS.World:AddSystems(CharacterSystem)
end