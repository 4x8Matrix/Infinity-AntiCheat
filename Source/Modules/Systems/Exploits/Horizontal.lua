--[[
	HorizontalSystem.lua
]]--

return function(InfinityECS)
	-- // Services
	local ParallelSchedulerService = InfinityECS:GetService("ParallelScheduler", true)
	local CharacterService = InfinityECS:GetService("Character", true)
	local SettingsService = InfinityECS:GetService("Settings", true)
	local PhysicsService = InfinityECS:GetService("Physics", true)
	local ZoneService = InfinityECS:GetService("Zone", true)
	local EnumService = InfinityECS:GetService("Enums", true)

	local AdorneeService = InfinityECS:GetService("Adornee", true)

	-- // Variables
	local MathAbs = math.abs

	local RoundingVector = Vector3.new(1, 0, 1)
	local HorizontalSystem = InfinityECS.System.new()
	HorizontalSystem.DeltaTimeComputed = 0
	HorizontalSystem.LoadedPlayers = { }
	HorizontalSystem.PlayerData = { }

	function HorizontalSystem:UpdatePlayer(PlayerEntity, PlayerData)
		if PlayerData.Mutex:IsLocked() then return end

		if PlayerEntity.Locked:Get() then return end
		if PlayerEntity.Timeout:Get() then return end

		local Player = PlayerEntity.Player.Data

		local RootPart = CharacterService.RootPart(Player)
		local Humanoid = CharacterService.Humanoid(Player)

		if not RootPart then return end
		if not Humanoid then return end

		if PlayerEntity.Idled:Get() then 
			PlayerData.LastRootPartCFrame = RootPart.CFrame

			return
		end

		if MathAbs(RootPart.Orientation.X) > SettingsService.MaxAngleRagdoll then
			if PlayerData.Mutex.Callback then
				return PlayerData.Mutex.Callback()
			end

			return
		end

		if PlayerData.LastRootPartCFrame then
			local Magnitude = ((RoundingVector * RootPart.Position) - (RoundingVector * PlayerData.LastRootPartCFrame.Position)).Magnitude

			if Magnitude > SettingsService.Exploits.Horizontal.MaxWalkSpeed + 5 then
				if CharacterService.IsState(Player, Enum.HumanoidStateType.Climbing, Enum.HumanoidStateType.Freefall, Enum.HumanoidStateType.Jumping, Enum.HumanoidStateType.Physics) then
					return PlayerData.Mutex.Callback()
				elseif CharacterService.WasState(Player, Enum.HumanoidStateType.Climbing, Enum.HumanoidStateType.Freefall, Enum.HumanoidStateType.Jumping, Enum.HumanoidStateType.Physics) then
					return PlayerData.Mutex.Callback()
				end

				if PhysicsService.Validate(Player) or ZoneService.Validate(Player) then
					return PlayerData.Mutex:Timeout(5)
				elseif PhysicsService.Validate(Player, PlayerData.LastRootPartCFrame.Position) or ZoneService.Validate(Player, PlayerData.LastRootPartCFrame.Position) then
					return PlayerData.Mutex:Timeout(5)
				end

				if #ZoneService.GetInstanceClassInRadius(Player, "TrussPart") > 0 then
					return PlayerData.Mutex:Timeout(5)
				end

				AdorneeService.Sphere(PlayerData.LastRootPartCFrame)
				AdorneeService.Sphere(RootPart.CFrame)

				ParallelSchedulerService.Job(EnumService.JobType.Namecall, Player.Character, "PivotTo", PlayerData.LastRootPartCFrame)

				return PlayerData.Mutex:Timeout(5)
			end
		end

		PlayerData.LastRootPartCFrame = RootPart.CFrame
	end

	function HorizontalSystem:InitPlayer(_, PlayerData)
		PlayerData.Mutex = InfinityECS.Mutex.new(function()
			PlayerData.LastRootPartCFrame = nil
		end)
	end

	function HorizontalSystem:PreUpdate(DeltaTime)
		self.DeltaTimeComputed = self.DeltaTimeComputed + DeltaTime

		if self.DeltaTimeComputed > 1 then
			return true
		end
	end

	function HorizontalSystem:OnUpdate(...)
		for _, PlayerEntity in HorizontalSystem.LoadedPlayers do
			if not HorizontalSystem.PlayerData[PlayerEntity] then
				HorizontalSystem.PlayerData[PlayerEntity] = { }

				HorizontalSystem:InitPlayer(PlayerEntity, HorizontalSystem.PlayerData[PlayerEntity])
			end

			HorizontalSystem:UpdatePlayer(PlayerEntity, HorizontalSystem.PlayerData[PlayerEntity], ...)
		end

		self.DeltaTimeComputed = 0
	end

	function HorizontalSystem:OnPlayerLoaded(PlayerEntity)
		table.insert(HorizontalSystem.LoadedPlayers, PlayerEntity)
	end

	function HorizontalSystem:OnPlayerRemoving(PlayerEntity)
		local PlayerIndex = table.find(HorizontalSystem.LoadedPlayers, PlayerEntity)

		if PlayerIndex then
			table.remove(HorizontalSystem.LoadedPlayers, PlayerIndex)
		end
	end

	-- // Binds
	InfinityECS.World:AddSystems(HorizontalSystem)
end