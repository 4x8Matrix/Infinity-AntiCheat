--[[
	ToolSystem.lua
]]--

return function(InfinityECS)
	-- // Services
	local SettingsService = InfinityECS:GetService("Settings", true)
	local ActionService = InfinityECS:GetService("Action", true)
	local ToolService = InfinityECS:GetService("Tool", true)

	local CharacterService = InfinityECS:GetService("Character", true)
	local GarbageCollection = InfinityECS:GetService("GarbageCollection", true)

	-- // Variables
	local ToolSystem = InfinityECS.System.new()
	local Query = InfinityECS.Query.new():FromComponents("Player", "UserId")

	-- local TableFind = table.find	
	-- local StringMatch = string.match

	function ToolSystem.OnCharacterAdded(PlayerEntity)
		local Player = PlayerEntity.Player:Get()
		local Janitors = PlayerEntity.Janitors:Get()

		local Humanoid = CharacterService.Humanoid(Player)
		local Character = Player.Character

		if Humanoid then
			local Janitor = InfinityECS.Janitor.new()
			table.insert(Janitors.Character, Janitor)

			Janitor:Give(Character.DescendantRemoving:Connect(function(Descendant)
				if not CharacterService.IsInBounds(Player) or not CharacterService.IsAlive(Player) then
					return
				end

				if Descendant:IsA("Tool") then
					PlayerEntity.ToolCount:Decrement(1)
				end
			end))

			Janitor:Give(Character.ChildAdded:Connect(function(Child)
				if not Child:IsA("Tool") then
					return
				end

				local ToolOwner = ToolService.GetOwner(Child)
				PlayerEntity.ToolCount:Increment(1)

				if ToolOwner then
					GarbageCollection.Push(Child)

					ActionService.TakeAction(ToolOwner, SettingsService.Violations.CharacterToolInjectionViolation)
				end

				if PlayerEntity.ToolCount:Get() > SettingsService.Exploits.Tool.MaxToolCount then
					GarbageCollection.Push(Child)

					ActionService.TakeAction(Player, SettingsService.Violations.ToolOverflowViolation)
				end
			end))
		end
	end

	function ToolSystem:OnUpdate()
		local Players = Query:GetResult()

		for _, PlayerEntity in Players do
			local Player = PlayerEntity.Player.Data
			local Character = Player.Character

			local Humanoid = CharacterService.Humanoid(Player)

			if PlayerEntity.ToolCount.Data >= 1 and Humanoid then
				for _, Object in Character:GetDescendants() do
					if Object:IsA("Tool") and Object:FindFirstChild("Handle") then
						local GripAttachment = CharacterService.Find(Player, SettingsService.Exploits.Tool.RigPaths[Humanoid.RigType])
						local WorldCFrame = Object.Handle.CFrame * Object.Grip

						local Magnitude = (GripAttachment.WorldPosition - WorldCFrame.Position).Magnitude

						if Magnitude > SettingsService.Exploits.Tool.MaxToolDistance then
							task.delay(0, Object.Destroy, Object)

							ActionService.TakeAction(Player, SettingsService.Violations.CharacterToolPositionViolation)
						end
					end
				end
			end
		end
	end

	function ToolSystem:OnPlayerLoaded(PlayerEntity)
		local Player = PlayerEntity.Player:Get()
		local Janitors = PlayerEntity.Janitors:Get()

		local Janitor = InfinityECS.Janitor.new()
		table.insert(Janitors.Global, Janitor)

		Janitor:Give(Player.CharacterAdded:Connect(function()
			ToolSystem.OnCharacterAdded(PlayerEntity)
		end))

		Janitor:Give(Player.CharacterRemoving:Connect(function()
			ToolSystem.OnCharacterAdded(PlayerEntity)
		end))

		if Player.Character then
			ToolSystem.OnCharacterAdded(PlayerEntity)
		end
	end

	-- // Binds
	InfinityECS.World:AddSystems(ToolSystem)
end